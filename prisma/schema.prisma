generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  username String @unique
  email    String @unique
  password String
  role     Role

  Student Student[]
  Faculty Faculty[]
}

enum Role {
  student
  faculty
}

model Student {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  studentId    String?     @db.ObjectId @unique
  name         String
  username     String
  email        String
  quizzesTaken QuizTaken[]
  user         User?       @relation(fields: [studentId], references: [id])
  Quiz         Quiz[]
}

model Faculty {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  facultyId String? @db.ObjectId @unique
  name      String
  username  String
  email     String
  user      User?   @relation(fields: [facultyId], references: [id])

  Quiz Quiz[]
}

model Quiz_Result {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  score           Int
  time            Int
  out_of_focus    Int
  answers_clicked Int
  timeStr         String
  dateTaken       DateTime
  QuizTaken       QuizTaken[]
  Retry           Retry[]
}

model QuizTaken {
  id     String       @id @default(auto()) @map("_id") @db.ObjectId
  quiz   Quiz         @relation(fields: [quizId], references: [id])
  quizId String       @db.ObjectId
  result Quiz_Result? @relation(fields: [quiz_ResultId], references: [id])

  dateTaken     DateTime @default(now())
  Student       Student? @relation(fields: [studentId], references: [studentId])
  studentId     String?  @db.ObjectId
  retriesLeft   Int      @default(5)
  Retry         Retry[]
  quiz_ResultId String?  @db.ObjectId
}

model Retry {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime     @default(now())
  quizTaken     QuizTaken    @relation(fields: [quizTakenId], references: [id])
  quizTakenId   String       @db.ObjectId
  result        Quiz_Result? @relation(fields: [quiz_ResultId], references: [id])
  quiz_ResultId String?      @db.ObjectId
}

model Quiz {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  quizName      String
  numberOfItems Int
  subject       String
  facultyId     String?   @db.ObjectId
  facultyName   String? 
  studentId     String?     @db.ObjectId 
  questions     Question[]
  QuizTaken     QuizTaken[]
  Faculty       Faculty?    @relation(fields: [facultyId], references: [facultyId])
  Student       Student?    @relation(fields: [studentId], references: [studentId])
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  questionText  String
  options       String[]
  correctAnswer String
  quiz          Quiz?    @relation(fields: [quizId], references: [id])
  quizId        String?  @db.ObjectId
}
